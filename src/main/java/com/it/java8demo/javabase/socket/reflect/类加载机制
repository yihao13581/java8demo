                                     类加载机制和反射
     当程序主动使用某个类时，如果该类还未被加载到内存中，则系统会通过加载、连接、初始化三个步骤来对该类进行初始化。
     JVM初始化一个类包含如下几个步骤：1、假如这个类没有被加载和连接，则程序先加载并连接该类。2、假如
该类的直接父类还没有被初始化，则先初始化其直接父类。3、假如类中有初始化语句，则系统依次执行这些初始化语句。


     JVM启动时，会形成由三个类加载器组成的初始类加载器层次结构:
                Bootstrap ClassLoader:根类加载器；
                Extension ClassLoader:扩展类加载器；
                System ClassLoader:系统类加载器。

     JVM的类加载机制主要有三种：１、全盘负责：所谓全盘负责，就是当一个类加载器负责加载某个Class时，该
 Class所依赖的和引用的其它Class也将该类加载器负责载入，除非显示使用另一个类加载器来载入。２、父类委托。
 所谓父类委托，则是先让parent类加载器试图加载该Class，只有在父类加载器无法加载该类时才尝试从自己的类路
 径中加载该类。３、缓存机制。缓存机制将会保证所有加载过的Class都会被缓存，当程序中需要使用某个Class时，
 类加载器先从缓存区中搜索该Class，只有当缓存中不存在该Class对象时，系统才会读取该类对应的二进制数据，
 并将其转换成Class对象，存入缓存区。这也是修改Class后，必须重新启动JVM，程序所做的修改才会生效的原因。